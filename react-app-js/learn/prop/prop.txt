
### 1. Spread Operator in JavaScript

The spread operator (`...`) allows an iterable such as an array or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.

**Example: Spread in Arrays**
```javascript
const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const combinedArray = [...array1, ...array2];
console.log(combinedArray); // [1, 2, 3, 4, 5, 6]
```

**Example: Spread in Objects**
```javascript
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const combinedObj = { ...obj1, ...obj2 };
console.log(combinedObj); // { a: 1, b: 2, c: 3, d: 4 }
```

### 2. Destructuring in JavaScript

Destructuring is a convenient way of extracting multiple values from data stored in objects and arrays into distinct variables.

**Example: Array Destructuring**
```javascript
const array = [1, 2, 3];
const [first, second, third] = array;
console.log(first);  // 1
console.log(second); // 2
console.log(third);  // 3
```

**Example: Object Destructuring**
```javascript
const obj = { a: 1, b: 2, c: 3 };
const { a, b, c } = obj;
console.log(a); // 1
console.log(b); // 2
console.log(c); // 3
```

### 3. Props in JavaScript (React)

In React, "props" (short for properties) are used to pass data from one component to another. Props are immutable and are used to render dynamic data in components.

**Example: Using Props in Functional Components**
```javascript
import React from 'react';

// Child Component
const ChildComponent = ({ name, age }) => {
  return (
    <div>
      <p>Name: {name}</p>
      <p>Age: {age}</p>
    </div>
  );
};

// Parent Component
const ParentComponent = () => {
  const user = { name: 'John', age: 25 };

  return (
    <div>
      <h1>User Information</h1>
      <ChildComponent name={user.name} age={user.age} />
    </div>
  );
};

export default ParentComponent;
```

In this example, `ParentComponent` passes the `name` and `age` props to `ChildComponent`, which then uses these props to render the user's information.

### Combined Example: Spread, Destructuring, and Props
Here's an example that combines the use of the spread operator, destructuring, and props in a React component.

```javascript
import React from 'react';

// Child Component
const ChildComponent = ({ name, age, city }) => {
  return (
    <div>
      <p>Name: {name}</p>
      <p>Age: {age}</p>
      <p>City: {city}</p>
    </div>
  );
};

// Parent Component
const ParentComponent = () => {
  const user = { name: 'John', age: 25, city: 'New York' };

  // Using spread operator to pass props
  return (
    <div>
      <h1>User Information</h1>
      <ChildComponent {...user} />
    </div>
  );
};

export default ParentComponent;
```

In this combined example:
- The `user` object is destructured into `name`, `age`, and `city`.
- The spread operator (`...user`) is used to pass all properties of the `user` object as props to `ChildComponent`.

This provides a clear, concise, and powerful way to manage and use data in JavaScript and React.